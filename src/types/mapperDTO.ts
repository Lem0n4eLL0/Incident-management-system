import {
  Role,
  UserDTO,
  User,
  IncidentDTO,
  Incident,
  IncidentType,
  IncidentStatus,
  FullUserDTO,
  FullUser,
} from './types';

export const mapUserFromDto = ({
  id,
  role,
  full_name,
  unit,
  position,
  telephone,
  email,
}: UserDTO): User => ({
  id,
  role: role as Role,
  fullName: full_name,
  unit,
  position,
  telephone,
  email,
});

export const mapUserToDto = ({
  id,
  role,
  fullName,
  unit,
  position,
  telephone,
  email,
}: User): UserDTO => ({
  id,
  role,
  full_name: fullName,
  unit,
  position,
  telephone,
  email,
});

export const mapFullUserFromDto = (dto: FullUserDTO): FullUser => ({
  id: dto.id,
  role: dto.role as Role,
  fullName: dto.full_name,
  unit: dto.unit,
  position: dto.position,
  telephone: dto.telephone,
  email: dto.email,
  login: dto.login,
  password: dto.password,
  token: {
    jti: dto.token.jti,
    isBlacklisted: dto.token.is_blacklisted === 'true',
    createdAtFormatted: new Date(dto.token.created_at_formatted),
    expiresAtFormatted: new Date(dto.token.expires_at_formatted),
    tokenTimer: dto.token.token_timer,
  },
  lastLogin: new Date(dto.last_login),
  isActive: dto.is_active === 'true',
  isStaff: dto.is_staff === 'true',
});

export const mapFullUserToDto = (user: FullUser): FullUserDTO => ({
  id: user.id,
  role: user.role,
  full_name: user.fullName,
  unit: user.unit,
  position: user.position,
  telephone: user.telephone,
  email: user.email,
  login: user.login,
  password: user.password,
  token: {
    jti: user.token.jti,
    is_blacklisted: user.token.isBlacklisted ? 'true' : 'false',
    created_at_formatted: user.token.createdAtFormatted.toISOString(),
    expires_at_formatted: user.token.expiresAtFormatted.toISOString(),
    token_timer: user.token.tokenTimer,
  },
  last_login: user.lastLogin.toISOString(),
  is_active: user.isActive ? 'true' : 'false',
  is_staff: user.isStaff ? 'true' : 'false',
});

export const mapIncidentToDto = ({
  id,
  incidentNumber,
  type,
  date,
  description,
  unit,
  author,
  status,
  measuresTaken,
  responsible,
}: Incident): IncidentDTO => ({
  id,
  incident_number: incidentNumber,
  type,
  date: date.toISOString(),
  description,
  unit,
  author: mapUserToDto(author),
  status,
  measures_taken: measuresTaken,
  responsible,
});

export const mapIncidentFromDto = ({
  id,
  incident_number,
  type,
  date,
  author,
  status,
  unit,
  description,
  responsible,
  measures_taken,
}: IncidentDTO): Incident => ({
  id,
  incidentNumber: incident_number,
  type: type as IncidentType,
  date: new Date(date),
  author: mapUserFromDto(author),
  status: (status ?? '') as IncidentStatus,
  unit,
  description,
  responsible,
  measuresTaken: measures_taken ?? '',
});
