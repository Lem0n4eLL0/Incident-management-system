[RUS]
Инструкция по вводу сервера в работу:

1. Установите "Python Django", включая оболочку "Django shell".
Чтобы проверить корректность установки, выполните в терминале команду "pip show django" (без кавычек). Здесь будет показана подробная информация о продукте, включая его версию.
(Сервер был написан на версии Django 5.1.6)

2. Необходимо установить систему управления базами данных (СУБД) "PostgreSQL". Для проверки на корректность установки и версию программы, выполните в терминале команду "psql --version" (без кавычек).
(Сервер использует версию 17.0)
  
3. Перейдите в терминал и создайте новую базу данных (по умолчанию, написанный сервер обращается к базе данных "incident_db". Желательно не менять название, чтобы избежать нежелательных несостыковок с моделями сервера и базы данных. Если только вы не уверены в своих действиях).

     Для этого:
     3.1. Выполните команду  "psql -U ваш_логин -d название_БД_по_умолчанию" (без кавычек)
     3.2. Введите скрытый пароль.
     3.3. Введите команду "CREATE DATABASE incident_db;" (без кавычек)
     (должно отобразиться сообщение "CREATE DATABASE", значит база данных успешно создана)

4. После установки СУБД и создания БД, внутри папки проекта найдите файл ".env", замените значения переменных "POSTGRES_USER" и "POSTGRES_PASSWORD" на ваши собственные значения имени пользователя и пароля, используемых в СУБД.

5. В новом окне терминала, перейдите в папку с проектом с помощью команды cd "путь_к_папке" (желательно путь поместить в кавычки, если он содержит пробельные символы)

6. Выполните команды:
python manage.py makemigrations
python manage.py migrate

Эти миграции создают/изменяют внутри созданной базы данных необходимые таблицы, модели и связи.
(При возникновении ошибок, установите необходимые библиотеки, которые будет требовать терминал. Через команду pip install название_библиотеки)
Если pip install не установлен, попробуйте его установить. Проверьте версию "pip --version" (без кавычек)

7. После успешного проведения всех миграций необходимо создать суперпользователя (админа).
Стандартная команда "python manage.py createsuperuser" может не сработать ввиду того, что изменена модель пользователя, требующая обязательного указания значения поля "unit" (Подразделение). 
Django по умолчанию не спрашивает о заполнении поля "unit", поэтому валидация на создание пользователя не пропускает выполнение команды.

     Для создания админа:
     7.1. Перейдите в папку с проектом через терминал как было указано ранее.
     7.2. Откройте "Django shell" командой "python manage.py shell" (без кавычек)
     7.3. Замените содержимое полей на ваши данные.

from users.models import User, Unit
from users.managers import UserManager 

unit = Unit.objects.get_or_create(name="ваше_подразделение")[0]

user = User.all_objects.create_superuser(
    email='ваша_почта', 
    password='ваш_пароль', 
    login='ваш_логин', 
    full_name='ваше_имя', 
    unit=unit,
    position='ваша_должность', 
    telephone='ваш_номер_телефона'
)

print("Суперпользователь создан:", user)


     7.4. Полностью скопируйте текст выше и вставьте его в терминал. Нажмите Enter.
     7.5. Должно высветиться сообщение "Суперпользователь создан"
     7.6. Введите exit(), чтобы выйти из "shell"

8. Перейдите в папку с проектом из терминала (если вы ещё этого не сделали) и выполните команду "python manage.py runserver 8080" (без кавычек). Сервер будет запущен на порту 8080.

9. Запустите клиент (приложение).


Внимание!!!
В приложении реализована система "мягкого" удаления пользователей и инцидентов. Она позволяет удалить пользователя из поля зрения клиентского приложения, но не из БД (базы данных). Это было сделано ввиду усиления сохранения безопасности данных.

"Мягко" удалённые данные помечаются в таблицах флажками t (true) или f (false) в поле is_deleted.
Поэтому настоятельно советуем ознакомиться с дополнительными командами и синтаксисом по управлению СУБД PostgreSQL, чтобы всегда иметь возможность перейти в необходимую таблицу и удалить пользователя/инцидент окончательно.

Вот НЕКОТОРЫЕ из них, позволяющие восстановить или удалить пользователя (удалить окончательно):


1. Перейти в базу данных:
psql -U ваш_логин -d incident_db

2. Ввести пароль.



3. Находясь в базе данных, просмотреть список отфильтрованных полей всех записей о пользователях/инцидентах по предпочтению:

SELECT id, incident_number, description, is_deleted from incidents_incident;
(id, номер инцидента, описание, статус "мягкого" удаления инцидента)


SELECT id, full_name, is_deleted FROM users_user; 
(id, полное имя пользователя, статус "мягкого" удаления пользователя)



4. Находясь в базе данных (БД), выполнить команду по предпочтению:

UPDATE incidents_incident SET is_deleted = false WHERE id = 'id_инцидента'; 
(если восстановить какую-либо запись инцидента из "мягкого" удаления)


DELETE FROM incidents_incident WHERE id = 'id_инцидента'; 
(окончательно удалить инцидент из БД)


UPDATE users_user SET is_deleted = false WHERE id = 'id_пользователя'; 
(если восстановить какого-либо пользователя из "мягкого" удаления)


DELETE FROM users_user WHERE id = 'id_пользователя'; 
(окончательно удалить пользователя из БД)




